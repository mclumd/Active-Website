<html>
<head>
<title>
Tweety flies 2.1
</title>
</head>

<body bgcolor="#ffffee" text="#000000" link="#ff0000" vlink="0000ff">

<h3> Tweety flies 2.1 </h3>
<p>
<h4>Description: </h4>

The Tweety example again. This time we tell Alma that Tweety is a
bird, so it concludes that Tweety flies. Then we tell it that Tweety
is a penguin, so it changes its belief about Tweety flying and now
believes that Tweety does not fly. We next tell Alma that Tweety
flies. Alma rejects the belief that Tweety does not fly since that was
based on a default. We finally tell Alma that Tweety does not
fly. This time there is a contradiction between two non-defeasible
formulas and Alma can make no choice between them so it has no longer
any beliefs about whether Tweety flies or not.
<br>

<p>
<a href="tweety_2_1_applet.html" target="History"> View the history applet</a>
<br>
<a href="../histories/tweety_2wh.pl"> Alma specification</a>
<br>
<a href="../histories/tweety_2_help.pl"> Prolog helper</a>
<p>
<h4>Run: </h4>
<ul>
<li> At step 1, Alma has the description of the domain, including how
to apply defaults and how to deal with contradictions.
<li> At step 4, it is told that Tweety is a bird.
<li> At step 5, Alma derives that a possible default conclusion is
that Tweety flies.
<li> At step 6, Alma concludes that the default is applicable (using
some prolog helpers).
<li> At step 7, Alma concludes that Tweety flies.
<li> But at step 11 we tell Alma that Tweety is a penguin.
<li> At step 12, Alma tries to apply the penguins-don't-fly default.
<li> At step 13, since there are no more preferred defaults that hold,
Alma decides that the default is good.
<li> At step 14 though, since a less preferred default (birds-fly)
applies, Alma distrusts the descendants of that default and  asserts
that Tweety does not fly. 
<li> At step 18, we inform Alma that Tweety flies after all.
<li> This generates a contradictions and distrust at step 19.
<li> At step 20 Alma starts to compute which if any of the
contradictands to reinstate.
<li> At step 21 Alma concludes that a derivation of flies(tweety) does
not depend on any default and  that not(flies(tweety)) does depend on
a default.
<li> So, t step 22 flies(tweety) is reinstated.
<li> But at step 25 we assert that Tweety does not fly.
<li> The same procedure occurs: we get the contra and distrust at step
26
<li> At step 28 Alma finds that neither contradictand depends on a
default.
<li> There is nothing more Alma can do, neither contradiction gets
reinstated and Alma has no opinion as to Tweety's flying.

</ul>
<p>
<h4>Note:</h4>
This uses prolog helper functions to compute whether to apply a
default and whether some contradictand depends on a default. These
computations could have been specified and done in Alma, but that
would take several steps and make things less clear without adding any
flexibility to the approach.

<p>
<hr>
<a href="mailto:kpurang@cs.umd.edu">kpurang@cs.umd.edu</a>
</html>

